//--notes on the current feature or issue--\\

project: building mentions and references models and relationships (in the database)
            each of these need a model
            there are essentially the same things, but mentions are for users and
            organizations, whereas refs are for all the other things.
            these will replace responses. there will still be a link on comments
            like the one there now for respond, but it will just autofill the 
            mention or ref boxes.
            responses depend on parent comment relationship
            these models will need double polymorphic relationships with 
                for eg mentionables and mentioners; referenceable and referencers

mentionables on pageable seem to be working; referenceables not so much
    need to add owner_name/slug (the owner_name part isnt being set now)
    sth to do with query_path?

need to have uniqueness...but actually that is taken care of by the unless statement

issue with link: has to do with the reference id being changed. now the resource
    that points to it doesnt have the reference pointing back
    
adding a reference to a comment: error
    #<NoMethodError: undefined method `gsub!' for nil:NilClass>
    (where gsub! is called on body)
    we'll have to come back to comments later

callbacks for activerecord -- something to be called to load mentions/refs...
    a callback in the model for loading these things

in rails console, to get a new mention:
    $m = Mention.new
    $m.mentioner_id = Resource.first.id (for eg)
    $m.mentioner_type = 'Resource'
    
    then connect the other way:
    $Resource.first.mentions << m
    
    similarly for reference
    
work in console: try calling sync_mentions and sync_references
    figure out what's going on in a resource first (before you mess with comments)
    
get the mention results in UI to only list users and orgs
get ref reseults in UI to only list posts (and comments somehow?)

----OTHER WORKING----

check out collaborators when you use the +share button at the upper right corner
    it seems buggy

for making things look nice, maybe we could have an if statement in description that
    gives the first few lines of the comment...you can call description on a pageable
    for sure, but can we call it on a comment?
    also, get the conversations slider for comments smaller than the one for 
        collected_into and also use smaller, square tiles
        maybe even just have an ajax-openable slider for conversations (if you 
            want to see the conversations this comment has spawned, click and it
            will appear. otherwise just a clickable thing like "see conversations
            about this comment"

in pageable, change the collections and collectionable lines (just 2 lines)
    into concerns (like conversationable)

have a before filter to make sure the user is signed in (use
    def authenticate_user! in application_controller.rb as the filter)
want the authenticate_user! method to hide all other modals when it pops up
    
have request_lead be called when a link is clicked (joe said he'd probably do this)
    so that when the user is done looking at the linked-to site, and returns to 
    our site, they will get the request_lead modal pop up

----OLD NOTES----

:touch => true in a polymorphic association (in a model) sets the updated_at or 
    updated_on timestamp to the current time when the object is saved or destroyed.
    so you'll want this true on things that can be added to other objects by
    users, such as mentions, references, comments, etc

posts are: Resource, Link, Collection, Conversation, Event
    (from page model :scope near the top of the file)
    
helpers are for views -- to keep views clean if you have a lot of complicated
    ruby that you don't want to put into erb and just need to access some methods

relationship between page and pageable:
    remember that each of these are just models (think of them as variables)
    page is a way to hold certain attributes for each pageable
    pageables are types of resources: we have 5 now -- events, links, etc
    certain attributes of every pageable is synced with the page table, namely:
        query_path, title, slug, state, created_at, updated_at, published_at, 
        and edited_at (these are in the page model)

"The Rails router recognizes URLs and dispatches them to a controller's 
        action. It can also generate paths and URLs, avoiding the need to 
        hardcode strings in your views." --rubyonrails.org

MVC, asset relationship
	MVCs use assets (assets are javascripts, images, CSS)
