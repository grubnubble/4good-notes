//--notes on the current feature or issue--\\

project:only conversations should have comments
    also, get the discussion button comments -- all comments are conversationable

will need an if else statment for discuss.js.erb -- one that handles comments 
    gracefully, giving the comment's author and the first few lines of the comment
    need to look at js again
    
don't worry about how things look. just get all relevant information up.

should we still have the comment button next to the discuss button on conversations?
    it seems redundant. the comment form is already up and ready.
    
issue with discuss.js.erb: even though we have an if statement, the ruby inside 
    still gets run

----OTHER WORKING----

have a before filter to make sure the user is signed in (use
    def authenticate_user! in application_controller.rb as the filter)
want the authenticate_user! method to hide all other modals when it pops up
    
play with the conversation thing user/visitor

have request_lead be called when a link is clicked (joe said he'd probably do this)
    so that when the user is done looking at the linked-to site, and returns to 
    our site, they will get the request_lead modal pop up

review polymorphic and write notes on what it means

----OLD NOTES----

relationship between page and pageable:
    remember that each of these are just models (think of them as variables)
    page is a way to hold certain attributes for each pageable
    pageables are types of resources: we have 5 now -- events, links, etc
    certain attributes of every pageable is synced with the page table, namely:
        query_path, title, slug, state, created_at, updated_at, published_at, 
        and edited_at (these are in the page model)

"The Rails router recognizes URLs and dispatches them to a controller's 
        action. It can also generate paths and URLs, avoiding the need to 
        hardcode strings in your views." --rubyonrails.org
