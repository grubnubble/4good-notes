//--notes on the current feature or issue--\\

project: get a box filled with all the conversations that have been started about
    the current event/link/resource/conversation/collection
    joe says dont worry about comments yet
    
check out elasticsearch

add things to index
    
don't worry about how things look. just get all relevant information up.
    
will eventually need to look at indexing (reindexing...we'll add an index in 
    pages_controller that is like  the liked_by_uids for referenced_by_conversations
    or some such name)
    
need to have a clear idea of what we are doing:
    how does a post know if a conversation has been started about it?
    if its id is in any conversationable_id? can we access those?
    
i was getting a little upset that I've been feeling overwhelmed, but then i 
    realized that previously, joe had been telling me exactly what files i should
    be looking at. now, it's up to me to figure that out. so it is much more
    difficult. and i shouldn't feel bad about it.

----OTHER WORKING----

have a before filter to make sure the user is signed in (use
    def authenticate_user! in application_controller.rb as the filter)
want the authenticate_user! method to hide all other modals when it pops up
    
have request_lead be called when a link is clicked (joe said he'd probably do this)
    so that when the user is done looking at the linked-to site, and returns to 
    our site, they will get the request_lead modal pop up

review polymorphic and write notes on what it means

----OLD NOTES----

posts are: Resource, Link, Collection, Announcement, Conversation, Event

    (from page model :scope near the top of the file)
helpers are for views -- to keep views clean if you have a lot of complicated
    ruby that you don't want to put into erb and just need to access some methods

relationship between page and pageable:
    remember that each of these are just models (think of them as variables)
    page is a way to hold certain attributes for each pageable
    pageables are types of resources: we have 5 now -- events, links, etc
    certain attributes of every pageable is synced with the page table, namely:
        query_path, title, slug, state, created_at, updated_at, published_at, 
        and edited_at (these are in the page model)

"The Rails router recognizes URLs and dispatches them to a controller's 
        action. It can also generate paths and URLs, avoiding the need to 
        hardcode strings in your views." --rubyonrails.org
