//--notes on the current feature or issue--\\

project:get a discuss buttton that does the same as the connect with user button
    give it the same icon as the comment button
    add "in reference to (the conversationable -- you'll need conversationable_id
        and conversationable_type)
        
jquery

use js console:
    show everything with an input tag...i think:
        $ $('input')

in _share_modal.html.haml:
= hidden_field_tag 'post[conversationable_id][]', :'conversationable_id'.value

          .conversationable
            %script#conversationable-template{:type => 'text/x-handlebars-template'}
              %something{:'data-conversationable-id' => '{{id}}'}
                = hidden_field_tag 'post[conversationable_id][]', "{{id}}"
                {{{text}}}
                = select_tag "post[conversationable_type{{id}}]"

in discuss.js.erb:
convers_template = Handlebars.compile(share.find('#conversationable-template').html());
  something = $(template({id: '<%= "#{@conversationable.class}-#{@connectable.id}" %>', text: '<%= escape_javascript %{<div class="conversationable-name">#{@conversationable.title}</div>}.html_safe %>'}));


----OTHER WORKING----

have a before filter to make sure the user is signed in (use
    def authenticate_user! in application_controller.rb as the filter)
want the authenticate_user! method to hide all other modals when it pops up
    
play with the conversation thing user/visitor

have request_lead be called when a link is clicked (joe said he'd probably do this)
    so that when the user is done looking at the linked-to site, and returns to 
    our site, they will get the request_lead modal pop up

review polymorphic and write notes on what it means

----OLD NOTES----

relationship between page and pageable:
    remember that each of these are just models (think of them as variables)
    page is a way to hold certain attributes for each pageable
    pageables are types of resources: we have 5 now -- events, links, etc
    certain attributes of every pageable is synced with the page table, namely:
        query_path, title, slug, state, created_at, updated_at, published_at, 
        and edited_at (these are in the page model)

"The Rails router recognizes URLs and dispatches them to a controller's 
        action. It can also generate paths and URLs, avoiding the need to 
        hardcode strings in your views." --rubyonrails.org
