//--notes on the current feature or issue--\\

project: create campaigns and releases

releases:
    on the page under admin, just have a listing of all releases that link to the
    branch on github
    get structure down, then we'll look into connecting deployment to github releases

work out any kinks in campaigns

code being unique handled correctly?
    shouldgenerate new friendly id method inpage model-- exception for campaigns
    OR: get the friendly_id history thing working for all pages (this directs all past slugs to current)
    new code should make new slug (friendly id)
    
get campaigns to be editable

to use friendlyId: do we need to have all titles set up for slugged?
    ie: extend FriendlyId
        friendly_id :title, use: :slugged
        (in the model)
    should_generate_new_friendly_id?
        title_changed?
        (is there any other time we need a new slug?
            for campaigns, if code changes)
            
check posts to make sure everything works (just check for new posts, campaigns for now)
    we will figure out how to get the old ones updated later (joe says probably
        just 6 lines of bash)
        
there may be something weird with the callbacks -- when should we find_page?

the issue is with configure_page vs find_page. in config, we name a page if a page
    doesnt already exist. in find_page, we are potentially overriding that page,
    and i'm not really all that sure how all of the details are working (er...
    not working)

something very strange with resource edit title...the title is like, halfway 
    updated    

----OTHER WORKING----

check out collaborators when you use the +share button at the upper right corner
    it seems buggy

for making things look nice, maybe we could have an if statement in description that
    gives the first few lines of the comment...you can call description on a pageable
    for sure, but can we call it on a comment?
    also, get the conversations slider for comments smaller than the one for 
        collected_into and also use smaller, square tiles
        maybe even just have an ajax-openable slider for conversations (if you 
            want to see the conversations this comment has spawned, click and it
            will appear. otherwise just a clickable thing like "see conversations
            about this comment"

in pageable, change the collections and collectionable lines (just 2 lines)
    into concerns (like conversationable)

have a before filter to make sure the user is signed in (use
    def authenticate_user! in application_controller.rb as the filter)
want the authenticate_user! method to hide all other modals when it pops up
    
have request_lead be called when a link is clicked (joe said he'd probably do this)
    so that when the user is done looking at the linked-to site, and returns to 
    our site, they will get the request_lead modal pop up

----OLD NOTES----

:touch => true in a polymorphic association (in a model) sets the updated_at or 
    updated_on timestamp to the current time when the object is saved or destroyed.
    so you'll want this true on things that can be added to other objects by
    users, such as mentions, references, comments, etc

posts are: Resource, Link, Collection, Conversation, Event
    (from page model :scope near the top of the file)
    
helpers are for views -- to keep views clean if you have a lot of complicated
    ruby that you don't want to put into erb and just need to access some methods

relationship between page and pageable:
    remember that each of these are just models (think of them as variables)
    page is a way to hold certain attributes for each pageable
    pageables are types of resources: we have 5 now -- events, links, etc
    certain attributes of every pageable is synced with the page table, namely:
        query_path, title, slug, state, created_at, updated_at, published_at, 
        and edited_at (these are in the page model)

"The Rails router recognizes URLs and dispatches them to a controller's 
        action. It can also generate paths and URLs, avoiding the need to 
        hardcode strings in your views." --rubyonrails.org

MVC, asset relationship
	MVCs use assets (assets are javascripts, images, CSS)
