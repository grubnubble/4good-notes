//--notes on the current feature or issue--\\

project:on each conversation, get a box like the one on links that gives a preview
    of the resource, event, link, conversation, etc that the current conversation
    references
    if the "in reference to" resource has attachments, show those in the box as
    a horizontal slider.
    comments should only be on conversation pages now
    
play around with conversationable to get the information you need, then worry 
    about formatting it nicely later.

read the posts section in Joe's Roadmap document

will eventually need to look at indexing (reindexing...we'll add an index in 
    pages_controller that is like  the liked_by_uids for referenced_by_conversations
    or some such name)

jquery
  
have the basic structure for conversationable down. now need to get specifics
    for each type of conversationable -- check out the roadmap

----OTHER WORKING----

have a before filter to make sure the user is signed in (use
    def authenticate_user! in application_controller.rb as the filter)
want the authenticate_user! method to hide all other modals when it pops up
    
have request_lead be called when a link is clicked (joe said he'd probably do this)
    so that when the user is done looking at the linked-to site, and returns to 
    our site, they will get the request_lead modal pop up

review polymorphic and write notes on what it means

----OLD NOTES----

helpers are for views -- to keep views clean if you have a lot of complicated
    ruby that you don't want to put into erb and just need to access some methods

relationship between page and pageable:
    remember that each of these are just models (think of them as variables)
    page is a way to hold certain attributes for each pageable
    pageables are types of resources: we have 5 now -- events, links, etc
    certain attributes of every pageable is synced with the page table, namely:
        query_path, title, slug, state, created_at, updated_at, published_at, 
        and edited_at (these are in the page model)

"The Rails router recognizes URLs and dispatches them to a controller's 
        action. It can also generate paths and URLs, avoiding the need to 
        hardcode strings in your views." --rubyonrails.org
